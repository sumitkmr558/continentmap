{"version":3,"file":"static/js/616.9f481684.chunk.js","mappings":"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","sources":["pages/PaintPage.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  IconButton,\n  Slider,\n  Tooltip,\n  AppBar,\n  Toolbar,\n  Typography,\n  useTheme,\n  styled,\n} from \"@mui/material\";\nimport BrushIcon from \"@mui/icons-material/Brush\";\nimport CleaningServicesIcon from \"@mui/icons-material/CleaningServices\";\nimport ShowChartIcon from \"@mui/icons-material/ShowChart\";\nimport CropSquareIcon from \"@mui/icons-material/CropSquare\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport CircleOutlinedIcon from \"@mui/icons-material/CircleOutlined\";\nimport LensIcon from \"@mui/icons-material/Lens\";\nimport FormatColorFillIcon from \"@mui/icons-material/FormatColorFill\";\nimport UndoIcon from \"@mui/icons-material/Undo\";\nimport RedoIcon from \"@mui/icons-material/Redo\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SaveAltIcon from \"@mui/icons-material/SaveAlt\";\n\nconst TOOLS = {\n  BRUSH: \"brush\",\n  ERASER: \"eraser\",\n  LINE: \"line\",\n  RECTANGLE: \"rectangle\",\n  RECTANGLE_FILL: \"rectangle_fill\",\n  CIRCLE: \"circle\",\n  CIRCLE_FILL: \"circle_fill\",\n  FILL: \"fill\",\n};\n\nconst ToolButton = styled(IconButton)(({ theme, selected }) => ({\n  color: selected ? theme.palette.success.main : theme.palette.text.primary,\n  border: selected\n    ? `2px solid ${theme.palette.success.main}`\n    : \"2px solid transparent\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.action.hover,\n  },\n  marginRight: theme.spacing(1),\n}));\n\nfunction PaintPage() {\n  const theme = useTheme();\n\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const drawing = useRef(false);\n  const startPoint = useRef({ x: 0, y: 0 });\n\n  const [tool, setTool] = useState(TOOLS.BRUSH);\n  const [strokeColor, setStrokeColor] = useState(\"#10b981\");\n  const [fillColor, setFillColor] = useState(\"#10b981\");\n  const [brushSize, setBrushSize] = useState(8);\n  const undoStack = useRef([]);\n  const redoStack = useRef([]);\n\n  // Save current canvas to undo stack\n  const saveState = () => {\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    const canvas = canvasRef.current;\n    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    undoStack.current.push(imgData);\n    // Limit undo stack length\n    if (undoStack.current.length > 50) undoStack.current.shift();\n    // Clear redo on new action\n    redoStack.current = [];\n  };\n\n  // Undo function\n  const undo = () => {\n    const ctx = ctxRef.current;\n    const canvas = canvasRef.current;\n    if (!ctx || undoStack.current.length === 0) return;\n\n    // Move current state to redo before undo\n    const currentData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    redoStack.current.push(currentData);\n\n    // Apply last undo state\n    const imgData = undoStack.current.pop();\n    ctx.putImageData(imgData, 0, 0);\n  };\n\n  // Redo function\n  const redo = () => {\n    const ctx = ctxRef.current;\n    const canvas = canvasRef.current;\n    if (!ctx || redoStack.current.length === 0) return;\n\n    // Move current state to undo before redo\n    const currentData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    undoStack.current.push(currentData);\n\n    // Apply last redo state\n    const imgData = redoStack.current.pop();\n    ctx.putImageData(imgData, 0, 0);\n  };\n\n  // Resize canvas to fill available space\n  const resizeCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const parent = canvas.parentElement;\n    if (!parent) return;\n\n    const dpr = window.devicePixelRatio || 1;\n\n    const width = parent.clientWidth;\n    const height =\n      window.innerHeight -\n      // AppBar height (64px default) spacing safe margin\n      64 -\n      16;\n\n    canvas.style.width = width + \"px\";\n    canvas.style.height = height + \"px\";\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n\n    const ctx = canvas.getContext(\"2d\");\n    ctx.scale(dpr, dpr);\n\n    // If context changed (initial load or resize), reapply styles\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    ctxRef.current = ctx;\n\n    // Optionally fill white background on start or resize:\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, width, height);\n\n    // After resize, save state so it's undoable\n    saveState();\n  };\n\n  useEffect(() => {\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n    };\n  }, []);\n\n  // Update strokeStyle and lineWidth according to selected tool and color\n  useEffect(() => {\n    if (!ctxRef.current) return;\n    const ctx = ctxRef.current;\n    if (tool === TOOLS.ERASER) {\n      ctx.strokeStyle = \"white\";\n    } else {\n      ctx.strokeStyle = strokeColor;\n    }\n    ctx.lineWidth = brushSize;\n  }, [strokeColor, brushSize, tool]);\n\n  // Drawing helpers:\n\n  const drawLine = (ctx, from, to, color, size) => {\n    ctx.strokeStyle = color;\n    ctx.lineWidth = size;\n    ctx.beginPath();\n    ctx.moveTo(from.x, from.y);\n    ctx.lineTo(to.x, to.y);\n    ctx.stroke();\n  };\n\n  const drawRect = (ctx, start, end, strokeColor, fillColor, size, fill) => {\n    const x = Math.min(start.x, end.x);\n    const y = Math.min(start.y, end.y);\n    const w = Math.abs(start.x - end.x);\n    const h = Math.abs(start.y - end.y);\n    ctx.lineWidth = size;\n    if (fill) {\n      ctx.fillStyle = fillColor;\n      ctx.fillRect(x, y, w, h);\n    }\n    ctx.strokeStyle = strokeColor;\n    ctx.strokeRect(x, y, w, h);\n  };\n\n  const drawCircle = (ctx, start, end, strokeColor, fillColor, size, fill) => {\n    const centerX = (start.x + end.x) / 2;\n    const centerY = (start.y + end.y) / 2;\n    const radiusX = Math.abs(start.x - end.x) / 2;\n    const radiusY = Math.abs(start.y - end.y) / 2;\n    const radius = Math.min(radiusX, radiusY);\n    ctx.lineWidth = size;\n    ctx.beginPath();\n    ctx.ellipse(centerX, centerY, radius, radius, 0, 0, Math.PI * 2);\n    if (fill) {\n      ctx.fillStyle = fillColor;\n      ctx.fill();\n    }\n    ctx.strokeStyle = strokeColor;\n    ctx.stroke();\n  };\n\n  // Flood fill algorithm (simplified)\n  const floodFill = (\n    ctx,\n    canvasWidth,\n    canvasHeight,\n    startX,\n    startY,\n    fillColor\n  ) => {\n    const imgData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n    const data = imgData.data;\n    const pixelPos = (y, x) => (y * canvasWidth + x) * 4;\n\n    const hexToRgba = (hex) => {\n      let r = 0,\n        g = 0,\n        b = 0,\n        a = 255;\n      if (hex.length === 7) {\n        r = parseInt(hex.slice(1, 3), 16);\n        g = parseInt(hex.slice(3, 5), 16);\n        b = parseInt(hex.slice(5, 7), 16);\n      } else if (hex.length === 9) {\n        r = parseInt(hex.slice(1, 3), 16);\n        g = parseInt(hex.slice(3, 5), 16);\n        b = parseInt(hex.slice(5, 7), 16);\n        a = parseInt(hex.slice(7, 9), 16);\n      }\n      return [r, g, b, a];\n    };\n\n    const targetPos = pixelPos(startY, startX);\n    const targetColor = [\n      data[targetPos],\n      data[targetPos + 1],\n      data[targetPos + 2],\n      data[targetPos + 3],\n    ];\n    const fillRGBA = hexToRgba(fillColor);\n\n    if (targetColor.every((v, i) => v === fillRGBA[i])) return;\n\n    const stack = [[startX, startY]];\n    while (stack.length) {\n      const [x, y] = stack.pop();\n      if (x < 0 || x >= canvasWidth || y < 0 || y >= canvasHeight) continue;\n      const currentPos = pixelPos(y, x);\n      const currentColor = [\n        data[currentPos],\n        data[currentPos + 1],\n        data[currentPos + 2],\n        data[currentPos + 3],\n      ];\n      if (!currentColor.every((v, i) => v === targetColor[i])) continue;\n\n      data[currentPos] = fillRGBA[0];\n      data[currentPos + 1] = fillRGBA[1];\n      data[currentPos + 2] = fillRGBA[2];\n      data[currentPos + 3] = fillRGBA[3];\n\n      stack.push([x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]);\n    }\n    ctx.putImageData(imgData, 0, 0);\n  };\n\n  // For pointer coordinates\n  const pointerPosition = (e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    let clientX, clientY;\n    if (e.touches && e.touches.length) {\n      clientX = e.touches[0].clientX;\n      clientY = e.touches[0].clientY;\n    } else {\n      clientX = e.clientX;\n      clientY = e.clientY;\n    }\n\n    return { x: clientX - rect.left, y: clientY - rect.top };\n  };\n\n  // Preview canvas to show shapes while drawing\n  const previewCanvasRef = useRef(null);\n  const previewCtxRef = useRef(null);\n\n  // Setup preview canvas overlay\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const previewCanvas = document.createElement(\"canvas\");\n    previewCanvas.style.position = \"absolute\";\n    previewCanvas.style.top = canvas.offsetTop + \"px\";\n    previewCanvas.style.left = canvas.offsetLeft + \"px\";\n    previewCanvas.style.pointerEvents = \"none\";\n    previewCanvas.style.zIndex = 10;\n\n    previewCanvas.width = canvas.width;\n    previewCanvas.height = canvas.height;\n    previewCanvas.style.width = canvas.style.width;\n    previewCanvas.style.height = canvas.style.height;\n\n    canvas.parentElement.style.position = \"relative\";\n    canvas.parentElement.appendChild(previewCanvas);\n\n    const ctx = previewCanvas.getContext(\"2d\");\n    const dpr = window.devicePixelRatio || 1;\n    ctx.scale(dpr, dpr);\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    previewCanvasRef.current = previewCanvas;\n    previewCtxRef.current = ctx;\n\n    return () => {\n      previewCanvas.remove();\n    };\n  }, []);\n\n  const clearPreview = () => {\n    if (!previewCtxRef.current) return;\n    const ctx = previewCtxRef.current;\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  const drawPreviewShape = (start, current) => {\n    if (!previewCtxRef.current) return;\n    const ctx = previewCtxRef.current;\n    clearPreview();\n\n    ctx.lineWidth = brushSize;\n    ctx.strokeStyle = strokeColor;\n    ctx.fillStyle = fillColor;\n\n    switch (tool) {\n      case TOOLS.LINE:\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.lineTo(current.x, current.y);\n        ctx.stroke();\n        break;\n      case TOOLS.RECTANGLE:\n        drawRect(ctx, start, current, strokeColor, fillColor, brushSize, false);\n        break;\n      case TOOLS.RECTANGLE_FILL:\n        drawRect(ctx, start, current, strokeColor, fillColor, brushSize, true);\n        break;\n      case TOOLS.CIRCLE:\n        drawCircle(\n          ctx,\n          start,\n          current,\n          strokeColor,\n          fillColor,\n          brushSize,\n          false\n        );\n        break;\n      case TOOLS.CIRCLE_FILL:\n        drawCircle(\n          ctx,\n          start,\n          current,\n          strokeColor,\n          fillColor,\n          brushSize,\n          true\n        );\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Pointer event handlers\n  const pointerDown = (e) => {\n    e.preventDefault();\n    if (!ctxRef.current) return;\n\n    drawing.current = true;\n    const pos = pointerPosition(e);\n    startPoint.current = pos;\n\n    if (tool === TOOLS.BRUSH || tool === TOOLS.ERASER) {\n      saveState();\n      const ctx = ctxRef.current;\n      ctx.beginPath();\n      ctx.moveTo(pos.x, pos.y);\n      ctx.strokeStyle = tool === TOOLS.ERASER ? \"white\" : strokeColor;\n      ctx.lineWidth = brushSize;\n      ctx.lineCap = \"round\";\n      ctx.lineJoin = \"round\";\n      ctx.lineTo(pos.x, pos.y);\n      ctx.stroke();\n    } else if (tool === TOOLS.FILL) {\n      saveState();\n      floodFill(\n        ctxRef.current,\n        canvasRef.current.width,\n        canvasRef.current.height,\n        Math.floor(pos.x),\n        Math.floor(pos.y),\n        strokeColor\n      );\n      drawing.current = false; // no drag after fill\n    } else if (\n      tool === TOOLS.LINE ||\n      tool === TOOLS.RECTANGLE ||\n      tool === TOOLS.RECTANGLE_FILL ||\n      tool === TOOLS.CIRCLE ||\n      tool === TOOLS.CIRCLE_FILL\n    ) {\n      saveState();\n      drawPreviewShape(pos, pos);\n    }\n  };\n\n  const pointerMove = (e) => {\n    e.preventDefault();\n    if (!drawing.current || !ctxRef.current) return;\n    const pos = pointerPosition(e);\n\n    if (tool === TOOLS.BRUSH || tool === TOOLS.ERASER) {\n      const ctx = ctxRef.current;\n      ctx.lineTo(pos.x, pos.y);\n      ctx.stroke();\n    } else if (\n      tool === TOOLS.LINE ||\n      tool === TOOLS.RECTANGLE ||\n      tool === TOOLS.RECTANGLE_FILL ||\n      tool === TOOLS.CIRCLE ||\n      tool === TOOLS.CIRCLE_FILL\n    ) {\n      drawPreviewShape(startPoint.current, pos);\n    }\n  };\n\n  const pointerUp = (e) => {\n    e.preventDefault();\n    if (!drawing.current || !ctxRef.current) return;\n    drawing.current = false;\n    const pos = pointerPosition(e);\n    const ctx = ctxRef.current;\n    clearPreview();\n\n    if (tool === TOOLS.LINE) {\n      drawLine(ctx, startPoint.current, pos, strokeColor, brushSize);\n    } else if (tool === TOOLS.RECTANGLE) {\n      drawRect(\n        ctx,\n        startPoint.current,\n        pos,\n        strokeColor,\n        fillColor,\n        brushSize,\n        false\n      );\n    } else if (tool === TOOLS.RECTANGLE_FILL) {\n      drawRect(\n        ctx,\n        startPoint.current,\n        pos,\n        strokeColor,\n        fillColor,\n        brushSize,\n        true\n      );\n    } else if (tool === TOOLS.CIRCLE) {\n      drawCircle(\n        ctx,\n        startPoint.current,\n        pos,\n        strokeColor,\n        fillColor,\n        brushSize,\n        false\n      );\n    } else if (tool === TOOLS.CIRCLE_FILL) {\n      drawCircle(\n        ctx,\n        startPoint.current,\n        pos,\n        strokeColor,\n        fillColor,\n        brushSize,\n        true\n      );\n    }\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    saveState();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(\n      0,\n      0,\n      canvas.width / (window.devicePixelRatio || 1),\n      canvas.height / (window.devicePixelRatio || 1)\n    );\n  };\n\n  const saveImage = () => {\n    const canvas = canvasRef.current;\n    const imgURL = canvas.toDataURL(\"image/png\");\n    const link = document.createElement(\"a\");\n    link.href = imgURL;\n    link.download = \"react-ms-paint.png\";\n    link.click();\n  };\n\n  // Tool icon mapping for better labels and accessibility\n  const TOOL_ICONS = {\n    [TOOLS.BRUSH]: <BrushIcon />,\n    [TOOLS.ERASER]: <CleaningServicesIcon />,\n    [TOOLS.LINE]: <ShowChartIcon />,\n    [TOOLS.RECTANGLE]: <CropSquareIcon />,\n    [TOOLS.RECTANGLE_FILL]: <CheckBoxIcon />,\n    [TOOLS.CIRCLE]: <CircleOutlinedIcon />,\n    [TOOLS.CIRCLE_FILL]: <LensIcon />,\n    [TOOLS.FILL]: <FormatColorFillIcon />,\n  };\n\n  return (\n    <Box sx={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\" sx={{ gap: 1, flexWrap: \"wrap\" }}>\n          <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n            React MS Paint\n          </Typography>\n          {Object.entries(TOOLS).map(([key, val]) => (\n            <Tooltip\n              key={val}\n              title={\n                val.charAt(0).toUpperCase() + val.slice(1).replace(\"_\", \" \")\n              }\n            >\n              <ToolButton\n                selected={tool === val}\n                onClick={() => setTool(val)}\n                aria-pressed={tool === val}\n                color=\"inherit\"\n                size=\"large\"\n              >\n                {TOOL_ICONS[val]}\n              </ToolButton>\n            </Tooltip>\n          ))}\n\n          <Tooltip title=\"Stroke Color\">\n            <input\n              type=\"color\"\n              aria-label=\"Select stroke color\"\n              style={{\n                width: 36,\n                height: 36,\n                borderRadius: 6,\n                border: \"none\",\n                cursor: \"pointer\",\n                padding: 0,\n                marginLeft: 8,\n              }}\n              value={strokeColor}\n              onChange={(e) => setStrokeColor(e.target.value)}\n            />\n          </Tooltip>\n          <Tooltip title=\"Fill Color (for shapes)\">\n            <input\n              type=\"color\"\n              aria-label=\"Select fill color\"\n              style={{\n                width: 36,\n                height: 36,\n                borderRadius: 6,\n                border: \"none\",\n                cursor:\n                  tool === TOOLS.RECTANGLE_FILL || tool === TOOLS.CIRCLE_FILL\n                    ? \"pointer\"\n                    : \"not-allowed\",\n                opacity:\n                  tool === TOOLS.RECTANGLE_FILL || tool === TOOLS.CIRCLE_FILL\n                    ? 1\n                    : 0.5,\n                marginLeft: 8,\n              }}\n              value={fillColor}\n              onChange={(e) => setFillColor(e.target.value)}\n              disabled={\n                !(tool === TOOLS.RECTANGLE_FILL || tool === TOOLS.CIRCLE_FILL)\n              }\n            />\n          </Tooltip>\n          <Tooltip title=\"Brush Size\">\n            <Box sx={{ width: 120, px: 2 }}>\n              <Slider\n                aria-label=\"Brush size\"\n                value={brushSize}\n                min={1}\n                max={50}\n                onChange={(e, val) => setBrushSize(val)}\n                size=\"small\"\n                sx={{ color: theme.palette.success.main }}\n              />\n            </Box>\n          </Tooltip>\n          <Tooltip title=\"Undo\">\n            <IconButton\n              onClick={undo}\n              color=\"inherit\"\n              aria-label=\"Undo\"\n              size=\"large\"\n            >\n              <UndoIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Redo\">\n            <IconButton\n              onClick={redo}\n              color=\"inherit\"\n              aria-label=\"Redo\"\n              size=\"large\"\n            >\n              <RedoIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Clear\">\n            <IconButton\n              onClick={clearCanvas}\n              color=\"inherit\"\n              aria-label=\"Clear canvas\"\n              size=\"large\"\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Save as PNG\">\n            <IconButton\n              onClick={saveImage}\n              color=\"inherit\"\n              aria-label=\"Save image\"\n              size=\"large\"\n            >\n              <SaveAltIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <Box sx={{ flexGrow: 1, position: \"relative\" }}>\n        <canvas\n          ref={canvasRef}\n          onMouseDown={pointerDown}\n          onMouseMove={pointerMove}\n          onMouseUp={pointerUp}\n          onMouseLeave={pointerUp}\n          onTouchStart={pointerDown}\n          onTouchMove={pointerMove}\n          onTouchEnd={pointerUp}\n          aria-label=\"Drawing canvas\"\n          tabIndex={0}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"white\",\n            borderRadius: 2,\n            touchAction: \"none\",\n            display: \"block\",\n          }}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nexport default PaintPage;\n"],"names":["TOOLS","BRUSH","ERASER","LINE","RECTANGLE","RECTANGLE_FILL","CIRCLE","CIRCLE_FILL","FILL","ToolButton","styled","IconButton","_ref","theme","selected","color","palette","success","main","text","primary","border","concat","backgroundColor","action","hover","marginRight","spacing","useTheme","canvasRef","useRef","ctxRef","drawing","startPoint","x","y","tool","setTool","useState","strokeColor","setStrokeColor","fillColor","setFillColor","brushSize","setBrushSize","undoStack","redoStack","saveState","ctx","current","canvas","imgData","getImageData","width","height","push","length","shift","resizeCanvas","parent","parentElement","dpr","window","devicePixelRatio","clientWidth","innerHeight","style","getContext","scale","lineCap","lineJoin","fillStyle","fillRect","useEffect","addEventListener","removeEventListener","strokeStyle","lineWidth","drawRect","start","end","size","fill","Math","min","w","abs","h","strokeRect","drawCircle","centerX","centerY","radiusX","radiusY","radius","beginPath","ellipse","PI","stroke","pointerPosition","e","rect","getBoundingClientRect","clientX","clientY","touches","left","top","previewCanvasRef","previewCtxRef","previewCanvas","document","createElement","position","offsetTop","offsetLeft","pointerEvents","zIndex","appendChild","remove","clearPreview","clearRect","drawPreviewShape","moveTo","lineTo","pointerDown","preventDefault","pos","floodFill","canvasWidth","canvasHeight","startX","startY","data","pixelPos","targetPos","targetColor","fillRGBA","hex","r","g","b","a","parseInt","slice","hexToRgba","every","v","i","stack","pop","currentPos","putImageData","floor","pointerMove","pointerUp","drawLine","from","to","TOOL_ICONS","_jsx","BrushIcon","CleaningServicesIcon","ShowChartIcon","CropSquareIcon","CheckBoxIcon","CircleOutlinedIcon","LensIcon","FormatColorFillIcon","_jsxs","Box","sx","display","flexDirection","children","AppBar","Toolbar","variant","gap","flexWrap","Typography","flexGrow","Object","entries","map","_ref2","key","val","Tooltip","title","charAt","toUpperCase","replace","onClick","type","borderRadius","cursor","padding","marginLeft","value","onChange","target","opacity","disabled","px","Slider","max","undo","currentData","UndoIcon","redo","RedoIcon","clearCanvas","DeleteIcon","saveImage","imgURL","toDataURL","link","href","download","click","SaveAltIcon","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","tabIndex","touchAction"],"sourceRoot":""}