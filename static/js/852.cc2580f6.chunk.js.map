{"version":3,"file":"static/js/852.cc2580f6.chunk.js","mappings":"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","sources":["pages/Typing.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\n// import {\n//   Box,\n//   Button,\n//   Container,\n//   Paper,\n//   TextField,\n//   Typography,\n//   LinearProgress,\n// } from \"@mui/material\";\n\n// function generateLine() {\n//   return Array(10).fill(\"asdf ;lkj\").join(\" \");\n// }\n// const testLines = Array(10).fill(null).map(generateLine);\n\n// function getCurrentIndices(line, input) {\n//   let charsSeen = 0;\n//   const words = line.split(\" \");\n//   let cursor = input.length;\n//   for (let w = 0; w < words.length; w++) {\n//     const word = words[w];\n//     if (cursor <= word.length) {\n//       return { wordIdx: w, letterIdx: cursor };\n//     }\n//     cursor -= word.length + 1; // +1 for space\n//   }\n//   return {\n//     wordIdx: words.length - 1,\n//     letterIdx: words[words.length - 1].length,\n//   };\n// }\n\n// function scoreLine(target, input) {\n//   let correct = 0;\n//   for (let i = 0; i < input.length; i++) {\n//     if (input[i] === target[i]) correct++;\n//   }\n//   return {\n//     correct,\n//     total: target.length,\n//     percent: ((correct / target.length) * 100).toFixed(1),\n//   };\n// }\n\n// function wpm(characters, seconds) {\n//   return seconds > 0 ? (characters / 5 / (seconds / 60)).toFixed(2) : \"0\";\n// }\n\n// export default function Typing() {\n//   const [currentLine, setCurrentLine] = useState(0);\n//   const [inputs, setInputs] = useState(Array(10).fill(\"\"));\n//   const [isStarted, setIsStarted] = useState(false);\n//   const [isFinished, setIsFinished] = useState(false);\n//   const [startTime, setStartTime] = useState(null);\n//   const [timer, setTimer] = useState(0);\n//   const [report, setReport] = useState(null);\n//   const inputRef = useRef();\n\n//   // Timer effect\n//   useEffect(() => {\n//     let interval = null;\n//     if (isStarted && !isFinished) {\n//       interval = setInterval(() => setTimer(Date.now() - startTime), 100);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isStarted, isFinished, startTime]);\n\n//   useEffect(() => {\n//     if (inputRef.current) inputRef.current.focus();\n//   }, [currentLine, isFinished]);\n\n//   const handleInputChange = (e) => {\n//     const value = e.target.value;\n//     if (!isStarted && value.length > 0) {\n//       setIsStarted(true);\n//       setStartTime(Date.now());\n//     }\n//     if (value.length <= testLines[currentLine].length) {\n//       const newInputs = [...inputs];\n//       newInputs[currentLine] = value;\n//       setInputs(newInputs);\n//     }\n//   };\n\n//   const handleKeyDown = (e) => {\n//     if (e.key === \"Enter\" && !isFinished) {\n//       e.preventDefault();\n//       handleNextLineOrSubmit();\n//     }\n//   };\n\n//   const handleNextLineOrSubmit = () => {\n//     if (inputs[currentLine].length !== testLines[currentLine].length) return;\n//     if (currentLine < 9) {\n//       setCurrentLine(currentLine + 1);\n//     } else {\n//       handleSubmit();\n//     }\n//   };\n\n//   const handleSubmit = () => {\n//     setIsFinished(true);\n//     setIsStarted(false);\n//     const elapsedSec = (Date.now() - startTime) / 1000;\n//     let totalCorrect = 0;\n//     let totalChars = 0;\n//     let totalTyped = 0;\n//     for (let i = 0; i < 10; i++) {\n//       const { correct, total } = scoreLine(testLines[i], inputs[i]);\n//       totalCorrect += correct;\n//       totalChars += total;\n//       totalTyped += inputs[i].length;\n//     }\n//     setReport({\n//       accuracy: ((totalCorrect / totalChars) * 100).toFixed(1),\n//       wpm: wpm(totalTyped, elapsedSec),\n//       time: elapsedSec.toFixed(2),\n//       totalCorrect,\n//       totalChars,\n//     });\n//   };\n\n//   const handleRestart = () => {\n//     setInputs(Array(10).fill(\"\"));\n//     setCurrentLine(0);\n//     setIsStarted(false);\n//     setIsFinished(false);\n//     setStartTime(null);\n//     setTimer(0);\n//     setReport(null);\n//     setTimeout(() => inputRef.current && inputRef.current.focus(), 0);\n//   };\n\n//   function renderHighlightedLine(line, input, finished) {\n//     const words = line.split(\" \");\n//     const { wordIdx, letterIdx } = getCurrentIndices(line, input);\n\n//     let globalChar = 0;\n//     let inputArr = input.split(\"\");\n\n//     return (\n//       <Box sx={{ fontSize: 22, fontFamily: \"monospace\", userSelect: \"none\" }}>\n//         {words.map((word, wi) => {\n//           const isCurrentWord = !finished && wi === wordIdx;\n//           let wordEls = [];\n\n//           for (let li = 0; li < word.length; li++) {\n//             const isCurrentLetter =\n//               !finished && wi === wordIdx && li === letterIdx;\n//             let charColor = \"#222\";\n//             if (inputArr[globalChar] && inputArr[globalChar] !== word[li])\n//               charColor = \"#d32f2f\";\n//             if (isCurrentLetter) charColor = \"#1976d2\";\n//             wordEls.push(\n//               <span\n//                 key={li}\n//                 style={{\n//                   fontWeight: isCurrentLetter ? \"bold\" : \"normal\",\n//                   color: charColor,\n//                   background: isCurrentLetter ? \"#bbdefb\" : \"\",\n//                   borderRadius: 3,\n//                   padding: \"1px 2px\",\n//                 }}\n//               >\n//                 {word[li]}\n//               </span>\n//             );\n//             globalChar++;\n//           }\n\n//           // Add space after word (except last word)\n//           if (wi < words.length - 1) {\n//             const isCurrentSpace =\n//               !finished && wi === wordIdx && letterIdx === word.length;\n//             let spaceColor = \"#222\";\n//             if (inputArr[globalChar] && inputArr[globalChar] !== \" \")\n//               spaceColor = \"#d32f2f\";\n//             if (isCurrentSpace) spaceColor = \"#1976d2\";\n//             wordEls.push(\n//               <span\n//                 key=\"space\"\n//                 style={{\n//                   fontWeight: isCurrentSpace ? \"bold\" : \"normal\",\n//                   color: spaceColor,\n//                   background: isCurrentSpace ? \"#bbdefb\" : \"\",\n//                   borderRadius: 3,\n//                   padding: \"1px 2px\",\n//                 }}\n//               >\n//                 &nbsp;\n//               </span>\n//             );\n//             globalChar++;\n//           }\n\n//           // Wrap word with highlight if it's the current word\n//           return (\n//             <span\n//               key={wi}\n//               style={{\n//                 background: isCurrentWord ? \"#e3f2fd\" : \"transparent\",\n//                 borderRadius: 4,\n//                 marginRight: 4,\n//                 padding: \"0 2px\",\n//                 display: \"inline-block\",\n//               }}\n//             >\n//               {wordEls}\n//             </span>\n//           );\n//         })}\n//       </Box>\n//     );\n//   }\n\n//   // Only enable next/submit when the current line is fully typed\n//   const currentLineFilled =\n//     inputs[currentLine].length === testLines[currentLine].length;\n\n//   return (\n//     <Container maxWidth=\"md\" sx={{ mt: 6 }}>\n//       <Paper elevation={4} sx={{ p: 4 }}>\n//         <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//           Typing Tutor: asdf ;lkj Practice\n//         </Typography>\n//         <Typography align=\"center\" sx={{ mb: 2 }}>\n//           Type each line, the <b>current letter and word are highlighted</b>.\n//           Timer runs as you type.\n//         </Typography>\n//         <LinearProgress\n//           variant=\"determinate\"\n//           value={(currentLine / 10) * 100}\n//           sx={{ mb: 4, height: 10, borderRadius: 5 }}\n//         />\n//         <Typography variant=\"h6\" align=\"center\" sx={{ mb: 2 }}>\n//           {isStarted && !isFinished ? (\n//             <>\n//               Timer: <b>{(timer / 1000).toFixed(1)}s</b>\n//             </>\n//           ) : isFinished && report ? (\n//             <>\n//               Time: <b>{report.time}s</b>\n//             </>\n//           ) : (\n//             <>\n//               Timer: <b>0.0s</b>\n//             </>\n//           )}\n//         </Typography>\n//         {!isFinished && (\n//           <>\n//             <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", mb: 1 }}>\n//               Line {currentLine + 1} of 10\n//             </Typography>\n//             <Box\n//               sx={{\n//                 mb: 2,\n//                 p: 2,\n//                 minHeight: 52,\n//                 background: \"#f5f5f5\",\n//                 borderRadius: 2,\n//                 fontFamily: \"monospace\",\n//                 overflowX: \"auto\",\n//                 fontSize: 22,\n//                 letterSpacing: 1.5,\n//               }}\n//             >\n//               {renderHighlightedLine(\n//                 testLines[currentLine],\n//                 inputs[currentLine],\n//                 isFinished\n//               )}\n//             </Box>\n//             <TextField\n//               inputRef={inputRef}\n//               fullWidth\n//               variant=\"outlined\"\n//               value={inputs[currentLine]}\n//               onChange={handleInputChange}\n//               onKeyDown={handleKeyDown}\n//               autoFocus\n//               placeholder={`Type line ${\n//                 currentLine + 1\n//               } and press Enter for next`}\n//               inputProps={{\n//                 maxLength: testLines[currentLine].length,\n//                 style: {\n//                   fontFamily: \"monospace\",\n//                   fontSize: 18,\n//                   letterSpacing: 1.5,\n//                 },\n//                 spellCheck: \"false\",\n//               }}\n//               sx={{ mb: 2, bgcolor: \"#fff\" }}\n//               disabled={isFinished}\n//             />\n//             <Box textAlign=\"center\" sx={{ mt: 2 }}>\n//               {currentLine < 9 ? (\n//                 <Button\n//                   variant=\"contained\"\n//                   color={currentLineFilled ? \"primary\" : \"inherit\"}\n//                   sx={{\n//                     px: 5,\n//                     py: 1.5,\n//                     fontSize: 18,\n//                     mt: 1,\n//                     backgroundColor: currentLineFilled ? undefined : \"#ddd\",\n//                   }}\n//                   onClick={handleNextLineOrSubmit}\n//                   disabled={!currentLineFilled}\n//                 >\n//                   Next Line\n//                 </Button>\n//               ) : (\n//                 <Button\n//                   variant=\"contained\"\n//                   color={currentLineFilled ? \"primary\" : \"inherit\"}\n//                   sx={{\n//                     px: 5,\n//                     py: 1.5,\n//                     fontSize: 18,\n//                     mt: 1,\n//                     backgroundColor: currentLineFilled ? \"#1976d2\" : \"#ddd\",\n//                     color: currentLineFilled ? \"#fff\" : \"#888\",\n//                     boxShadow: currentLineFilled\n//                       ? \"0 0 12px #1976d266\"\n//                       : \"none\",\n//                   }}\n//                   onClick={handleSubmit}\n//                   disabled={!currentLineFilled}\n//                 >\n//                   Submit\n//                 </Button>\n//               )}\n//               <Button\n//                 variant=\"outlined\"\n//                 color=\"secondary\"\n//                 sx={{ px: 5, py: 1.5, fontSize: 18, mt: 1, ml: 2 }}\n//                 onClick={handleRestart}\n//               >\n//                 Restart\n//               </Button>\n//             </Box>\n//           </>\n//         )}\n//         {isFinished && report && (\n//           <Box sx={{ mt: 3, textAlign: \"center\" }}>\n//             <Typography variant=\"h5\" sx={{ mb: 2 }}>\n//               <b>Report</b>\n//             </Typography>\n//             <Typography variant=\"body1\">\n//               <b>Time:</b> {report.time} seconds\n//             </Typography>\n//             <Typography variant=\"body1\">\n//               <b>Accuracy:</b> {report.accuracy}%\n//             </Typography>\n//             <Typography variant=\"body1\">\n//               <b>WPM:</b> {report.wpm}\n//             </Typography>\n//             <Typography variant=\"body1\">\n//               <b>Correct Characters:</b> {report.totalCorrect} /{\" \"}\n//               {report.totalChars}\n//             </Typography>\n//             <Button\n//               variant=\"contained\"\n//               color=\"secondary\"\n//               sx={{ px: 5, py: 1.5, fontSize: 18, mt: 3 }}\n//               onClick={handleRestart}\n//             >\n//               Restart\n//             </Button>\n//           </Box>\n//         )}\n//       </Paper>\n//     </Container>\n//   );\n// }\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Paper,\n  TextField,\n  Typography,\n  LinearProgress,\n} from \"@mui/material\";\n\nconst phases = [\n  {\n    name: \"Basic: ASDF JKL;\",\n    lines: Array(10)\n      .fill(null)\n      .map(() => Array(10).fill(\"asdf jkl;\").join(\" \")),\n  },\n  {\n    name: \"Basic: QWERTY UIOP\",\n    lines: Array(10)\n      .fill(null)\n      .map(() => Array(10).fill(\"qwerty uiop\").join(\" \")),\n  },\n  {\n    name: \"Basic: ZXCV BN\",\n    lines: Array(10)\n      .fill(null)\n      .map(() => Array(10).fill(\"zxcv bn\").join(\" \")),\n  },\n  {\n    name: \"Basic: Numbers\",\n    lines: Array(10)\n      .fill(null)\n      .map(() => Array(10).fill(\"12345 67890\").join(\" \")),\n  },\n  {\n    name: \"Advanced: Mixed Case\",\n    lines: Array(10)\n      .fill(null)\n      .map(() =>\n        Array(10)\n          .fill(null)\n          .map(() => (Math.random() < 0.5 ? \"Hello World\" : \"hello world\"))\n          .join(\" \")\n      ),\n  },\n  {\n    name: \"Advanced: Punctuation\",\n    lines: Array(10)\n      .fill(null)\n      .map(() => Array(10).fill(\"Hello, World! How's it going?\").join(\" \")),\n  },\n];\n\nfunction getCurrentIndices(line, input) {\n  let charsSeen = 0;\n  const words = line.split(\" \");\n  let cursor = input.length;\n  for (let w = 0; w < words.length; w++) {\n    const word = words[w];\n    if (cursor <= word.length) {\n      return { wordIdx: w, letterIdx: cursor };\n    }\n    cursor -= word.length + 1; // +1 for space\n  }\n  return {\n    wordIdx: words.length - 1,\n    letterIdx: words[words.length - 1].length,\n  };\n}\n\nfunction scoreLine(target, input) {\n  let correct = 0;\n  for (let i = 0; i < input.length; i++) {\n    if (input[i] === target[i]) correct++;\n  }\n  return {\n    correct,\n    total: target.length,\n    percent: ((correct / target.length) * 100).toFixed(1),\n  };\n}\n\nfunction wpm(characters, seconds) {\n  return seconds > 0 ? (characters / 5 / (seconds / 60)).toFixed(2) : \"0\";\n}\n\nfunction Typing() {\n  const [currentPhaseIdx, setCurrentPhaseIdx] = useState(0);\n  const [currentLineIdx, setCurrentLineIdx] = useState(0);\n  const [inputs, setInputs] = useState(Array(10).fill(\"\"));\n  const [isStarted, setIsStarted] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [timer, setTimer] = useState(0);\n  const [report, setReport] = useState(null);\n  const inputRef = useRef();\n\n  useEffect(() => {\n    let interval = null;\n    if (isStarted && !isFinished) {\n      interval = setInterval(() => setTimer(Date.now() - startTime), 100);\n    }\n    return () => clearInterval(interval);\n  }, [isStarted, isFinished, startTime]);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n  }, [currentLineIdx, isFinished]);\n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    if (!isStarted && value.length > 0) {\n      setIsStarted(true);\n      setStartTime(Date.now());\n    }\n    if (value.length <= phases[currentPhaseIdx].lines[currentLineIdx].length) {\n      const newInputs = [...inputs];\n      newInputs[currentLineIdx] = value;\n      setInputs(newInputs);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\" && !isFinished) {\n      e.preventDefault();\n      handleNextLineOrSubmit();\n    }\n  };\n\n  const handleNextLineOrSubmit = () => {\n    if (\n      inputs[currentLineIdx].length !==\n      phases[currentPhaseIdx].lines[currentLineIdx].length\n    )\n      return;\n    if (currentLineIdx < phases[currentPhaseIdx].lines.length - 1) {\n      setCurrentLineIdx(currentLineIdx + 1);\n    } else {\n      handleSubmit();\n    }\n  };\n\n  const handleSubmit = () => {\n    setIsFinished(true);\n    setIsStarted(false);\n    const elapsedSec = (Date.now() - startTime) / 1000;\n    let totalCorrect = 0;\n    let totalChars = 0;\n    let totalTyped = 0;\n    for (let i = 0; i < phases[currentPhaseIdx].lines.length; i++) {\n      const { correct, total } = scoreLine(\n        phases[currentPhaseIdx].lines[i],\n        inputs[i]\n      );\n      totalCorrect += correct;\n      totalChars += total;\n      totalTyped += inputs[i].length;\n    }\n    setReport({\n      accuracy: ((totalCorrect / totalChars) * 100).toFixed(1),\n      wpm: wpm(totalTyped, elapsedSec),\n      time: elapsedSec.toFixed(2),\n      totalCorrect,\n      totalChars,\n    });\n  };\n\n  const handlePhaseChange = (idx) => {\n    setCurrentPhaseIdx(idx);\n    setCurrentLineIdx(0);\n    setInputs(Array(10).fill(\"\"));\n    setIsStarted(false);\n    setIsFinished(false);\n    setStartTime(null);\n    setTimer(0);\n    setReport(null);\n  };\n\n  function renderHighlightedLine(line, input, finished) {\n    const words = line.split(\" \");\n    const { wordIdx, letterIdx } = getCurrentIndices(line, input);\n\n    let globalChar = 0;\n    let inputArr = input.split(\"\");\n\n    return (\n      <Box sx={{ fontSize: 22, fontFamily: \"monospace\", userSelect: \"none\" }}>\n        {words.map((word, wi) => {\n          const isCurrentWord = !finished && wi === wordIdx;\n          let wordEls = [];\n\n          for (let li = 0; li < word.length; li++) {\n            const isCurrentLetter =\n              !finished && wi === wordIdx && li === letterIdx;\n            let charColor = \"#222\";\n            if (inputArr[globalChar] && inputArr[globalChar] !== word[li])\n              charColor = \"#d32f2f\";\n            if (isCurrentLetter) charColor = \"#1976d2\";\n            wordEls.push(\n              <span\n                key={li}\n                style={{\n                  fontWeight: isCurrentLetter ? \"bold\" : \"normal\",\n                  color: charColor,\n                  background: isCurrentLetter ? \"#bbdefb\" : \"\",\n                  borderRadius: 3,\n                  padding: \"1px 2px\",\n                }}\n              >\n                {word[li]}\n              </span>\n            );\n            globalChar++;\n          }\n\n          // Add space after word (except last word)\n          if (wi < words.length - 1) {\n            const isCurrentSpace =\n              !finished && wi === wordIdx && letterIdx === word.length;\n            let spaceColor = \"#222\";\n            if (inputArr[globalChar] && inputArr[globalChar] !== \" \")\n              spaceColor = \"#d32f2f\";\n            if (isCurrentSpace) spaceColor = \"#1976d2\";\n            wordEls.push(\n              <span\n                key=\"space\"\n                style={{\n                  fontWeight: isCurrentSpace ? \"bold\" : \"normal\",\n                  color: spaceColor,\n                  background: isCurrentSpace ? \"#bbdefb\" : \"\",\n                  borderRadius: 3,\n                  padding: \"1px 2px\",\n                }}\n              >\n                &nbsp;\n              </span>\n            );\n            globalChar++;\n          }\n\n          // Wrap word with highlight if it's the current word\n          return (\n            <span\n              key={wi}\n              style={{\n                background: isCurrentWord ? \"#e3f2fd\" : \"transparent\",\n                borderRadius: 4,\n                marginRight: 4,\n                padding: \"0 2px\",\n                display: \"inline-block\",\n              }}\n            >\n              {wordEls}\n            </span>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 6 }}>\n      <Paper elevation={4} sx={{ p: 4 }}>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n          Typing Tutor: {phases[currentPhaseIdx].name}\n        </Typography>\n        {phases.map((phase, idx) => (\n          <Button\n            key={idx}\n            variant={currentPhaseIdx === idx ? \"contained\" : \"outlined\"}\n            onClick={() => handlePhaseChange(idx)}\n            sx={{ mr: 2 }}\n          >\n            {phase.name}\n          </Button>\n        ))}\n        <LinearProgress\n          variant=\"determinate\"\n          value={(currentLineIdx / phases[currentPhaseIdx].lines.length) * 100}\n          sx={{ mb: 4, height: 10, borderRadius: 5 }}\n        />\n        <Typography variant=\"h6\" align=\"center\" sx={{ mb: 2 }}>\n          {isStarted && !isFinished ? (\n            <>\n              Timer: <b>{(timer / 1000).toFixed(1)}s</b>\n            </>\n          ) : isFinished && report ? (\n            <>\n              Time: <b>{report.time}s</b>\n            </>\n          ) : (\n            <>\n              Timer: <b>0.0s</b>\n            </>\n          )}\n        </Typography>\n        {!isFinished && (\n          <>\n            <Typography variant=\"subtitle1\" sx={{ fontWeight: \"bold\", mb: 1 }}>\n              Line {currentLineIdx + 1} of{\" \"}\n              {phases[currentPhaseIdx].lines.length}\n            </Typography>\n            <Box\n              sx={{\n                mb: 2,\n                p: 2,\n                minHeight: 52,\n                background: \"#f5f5f5\",\n                borderRadius: 2,\n                fontFamily: \"monospace\",\n                overflowX: \"auto\",\n                fontSize: 22,\n                letterSpacing: 1.5,\n              }}\n            >\n              {renderHighlightedLine(\n                phases[currentPhaseIdx].lines[currentLineIdx],\n                inputs[currentLineIdx],\n                isFinished\n              )}\n            </Box>\n            <TextField\n              inputRef={inputRef}\n              fullWidth\n              variant=\"outlined\"\n              value={inputs[currentLineIdx]}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              autoFocus\n              placeholder={`Type line ${\n                currentLineIdx + 1\n              } and press Enter for next`}\n              inputProps={{\n                maxLength: phases[currentPhaseIdx].lines[currentLineIdx].length,\n                style: {\n                  fontFamily: \"monospace\",\n                  fontSize: 18,\n                  letterSpacing: 1.5,\n                },\n                spellCheck: \"false\",\n              }}\n              sx={{ mb: 2, bgcolor: \"#fff\" }}\n              disabled={isFinished}\n            />\n            <Box textAlign=\"center\" sx={{ mt: 2 }}>\n              {currentLineIdx < phases[currentPhaseIdx].lines.length - 1 ? (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  sx={{\n                    px: 5,\n                    py: 1.5,\n                    fontSize: 18,\n                    mt: 1,\n                  }}\n                  onClick={handleNextLineOrSubmit}\n                  disabled={\n                    inputs[currentLineIdx].length !==\n                    phases[currentPhaseIdx].lines[currentLineIdx].length\n                  }\n                >\n                  Next Line\n                </Button>\n              ) : (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  sx={{\n                    px: 5,\n                    py: 1.5,\n                    fontSize: 18,\n                    mt: 1,\n                  }}\n                  onClick={handleSubmit}\n                  disabled={\n                    inputs[currentLineIdx].length !==\n                    phases[currentPhaseIdx].lines[currentLineIdx].length\n                  }\n                >\n                  Submit\n                </Button>\n              )}\n            </Box>\n          </>\n        )}\n        {isFinished && report && (\n          <Box sx={{ mt: 3, textAlign: \"center\" }}>\n            <Typography variant=\"h5\" sx={{ mb: 2 }}>\n              <b>Report</b>\n            </Typography>\n            <Typography variant=\"body1\">\n              <b>Time:</b> {report.time} seconds\n            </Typography>\n            <Typography variant=\"body1\">\n              <b>Accuracy:</b> {report.accuracy}%\n            </Typography>\n            <Typography variant=\"body1\">\n              <b>WPM:</b> {report.wpm}\n            </Typography>\n            <Typography variant=\"body1\">\n              <b>Correct Characters:</b> {report.totalCorrect} /{\" \"}\n              {report.totalChars}\n            </Typography>\n          </Box>\n        )}\n      </Paper>\n    </Container>\n  );\n}\n\nexport default Typing;\n"],"names":["phases","name","lines","Array","fill","map","join","Math","random","scoreLine","target","input","correct","i","length","total","percent","toFixed","currentPhaseIdx","setCurrentPhaseIdx","useState","currentLineIdx","setCurrentLineIdx","inputs","setInputs","isStarted","setIsStarted","isFinished","setIsFinished","startTime","setStartTime","timer","setTimer","report","setReport","inputRef","useRef","useEffect","interval","setInterval","Date","now","clearInterval","current","focus","handleNextLineOrSubmit","handleSubmit","elapsedSec","totalCorrect","totalChars","totalTyped","characters","seconds","accuracy","wpm","time","_jsx","Container","maxWidth","sx","mt","children","_jsxs","Paper","elevation","p","Typography","variant","align","gutterBottom","phase","idx","Button","onClick","handlePhaseChange","mr","LinearProgress","value","mb","height","borderRadius","_Fragment","fontWeight","Box","minHeight","background","fontFamily","overflowX","fontSize","letterSpacing","line","finished","words","split","wordIdx","letterIdx","cursor","w","word","getCurrentIndices","globalChar","inputArr","userSelect","wi","isCurrentWord","wordEls","li","isCurrentLetter","charColor","push","style","color","padding","isCurrentSpace","spaceColor","marginRight","display","renderHighlightedLine","TextField","fullWidth","onChange","e","newInputs","onKeyDown","key","preventDefault","autoFocus","placeholder","concat","inputProps","maxLength","spellCheck","bgcolor","disabled","textAlign","px","py"],"sourceRoot":""}