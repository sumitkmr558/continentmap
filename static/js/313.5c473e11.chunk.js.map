{"version":3,"file":"static/js/313.5c473e11.chunk.js","mappings":"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","sources":["components/JungleCard.jsx","pages/GuessMyNameGame.jsx"],"sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography, Box } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\n\n// This component expects `current` = { name, img, fact }\n// And `showFact` = true/false\n\nconst JungleCard = ({ current, showFact }) => {\n  return (\n    <Card\n      sx={{\n        maxWidth: 360,\n        mx: \"auto\",\n        my: 4,\n        borderRadius: 4,\n        boxShadow: 8,\n        backgroundColor: \"#e0f2f1\",\n        overflow: \"hidden\",\n      }}\n    >\n      <Box sx={{ position: \"relative\", p: 2, bgcolor: \"#a5d6a7\" }}>\n        <motion.img\n          src={current.img}\n          alt={current.name}\n          initial={{ scale: 0.9 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0.5 }}\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n            borderRadius: \"12px\",\n            filter: showFact ? \"none\" : \"blur(5px)\",\n            boxShadow: \"0 4px 12px rgba(0,0,0,0.2)\",\n          }}\n        />\n      </Box>\n\n      <CardContent>\n        <Typography\n          variant=\"h6\"\n          align=\"center\"\n          fontWeight=\"bold\"\n          color=\"primary\"\n          gutterBottom\n        >\n          {current.name}\n        </Typography>\n        {showFact && (\n          <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\">\n            {current.fact}\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default JungleCard;\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Box,\n  Stack,\n  CardActions,\n  Container,\n  TextField,\n  Button,\n} from \"@mui/material\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nimport { motion } from \"framer-motion\";\nimport useSound from \"use-sound\";\nimport confetti from \"canvas-confetti\";\nimport Lottie from \"lottie-react\";\nimport explorerAnim from \"../lottie/explorer.json\";\nimport successSfx from \"../sounds/success.mp3\";\nimport failSfx from \"../sounds/fail.mp3\";\nimport ambientSfx from \"../sounds/jungle_ambient.mp3\";\nimport JungleCard from \"../components/JungleCard\";\n\nconst questions = [\n  {\n    clue: \"I have eight arms. I protect myself by ejecting ink at my attackers.\",\n    answer: \"octopus\",\n    img: `${process.env.PUBLIC_URL}/images/octopus.png`,\n    fact: \"Octopuses have three hearts and blue blood!\",\n  },\n  {\n    clue: \"I have a duck-like bill. I am featured on the 20-cent coin of Australia.\",\n    answer: \"platypus\",\n    img: `${process.env.PUBLIC_URL}/images/platypus.png`,\n    fact: \"The platypus can detect electrical signals underwater!\",\n  },\n  {\n    clue: \"I resemble a teddy bear and live in Australia. I eat eucalyptus leaves.\",\n    answer: \"koala\",\n    img: `${process.env.PUBLIC_URL}/images/koala.jpg`,\n    fact: \"Koalas sleep around 20 hours a day!\",\n  },\n  {\n    clue: \"I am a long-haired, intelligent ape from Indonesia and Malaysia.\",\n    answer: \"orangutan\",\n    img: `${process.env.PUBLIC_URL}/images/orangutan.png`,\n    fact: \"Orangutans use tools and are very smart!\",\n  },\n  {\n    clue: \"I am a flightless bird from New Zealand. A fruit is named after me.\",\n    answer: \"kiwi\",\n    img: `${process.env.PUBLIC_URL}/images/kiwi.png`,\n    fact: \"Kiwis have nostrils at the end of their beaks!\",\n  },\n  {\n    clue: \"I am the only snake that builds a nest. I hiss like a growling dog.\",\n    answer: \"king cobra\",\n    img: `${process.env.PUBLIC_URL}/images/king_cobra.png`,\n    fact: 'The king cobra can \"stand up\" and look a person in the eye!',\n  },\n];\n\nexport default function GuessMyNameGame() {\n  const [wrongAnswerShown, setWrongAnswerShown] = useState(false);\n  const navigate = useNavigate();\n  const [index, setIndex] = useState(0);\n  const [guess, setGuess] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const [showFact, setShowFact] = useState(false);\n  const [playSuccess] = useSound(successSfx);\n  const [playFail] = useSound(failSfx);\n  const [playAmbient] = useSound(ambientSfx, { loop: true, volume: 0.3 });\n  const [status, setStatus] = useState(false);\n\n  const current = questions[index];\n\n  React.useEffect(() => {\n    playAmbient();\n  }, []);\n\n  const resetGame = () => {\n    setIndex(0);\n    setGuess(\"\");\n    setScore(0);\n    setShowFact(false);\n    setWrongAnswerShown(false); // if you added that earlier\n    setStatus(false);\n  };\n\n  const checkAnswer = () => {\n    const isCorrect =\n      guess.trim().toLowerCase() === current.answer.toLowerCase();\n    if (isCorrect) {\n      playSuccess();\n      confetti();\n      setStatus(true);\n      setScore(score + 1);\n      setShowFact(true);\n      setTimeout(() => {\n        setShowFact(false);\n        setStatus(false);\n        setIndex(index + 1);\n        setGuess(\"\");\n      }, 3000);\n    } else {\n      playFail();\n      setShowFact(true);\n      setWrongAnswerShown(true); // Show correct answer\n      setStatus(true);\n      setTimeout(() => {\n        setWrongAnswerShown(false);\n        setStatus(false);\n        setShowFact(false);\n        setIndex(index + 1);\n        setGuess(\"\");\n      }, 3000);\n    }\n  };\n\n  const lottieOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: explorerAnim,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  if (index >= questions.length) {\n    return (\n      <Container sx={{ mt: 8 }}>\n        <Card\n          className=\"card_primary\"\n          sx={{ maxWidth: \"640px\", margin: \"auto\" }}\n        >\n          <CardHeader title={\"Guess My Name Quest Complete!\"} />\n          <CardContent>\n            <Typography>\n              You discovered {score} out of {questions.length} animals! 🏆\n              Achievement:{\" \"}\n              {score <= 2\n                ? \"🥉 Jungle Beginner\"\n                : score <= 4\n                ? \"🥈 Explorer\"\n                : \"🥇 Jungle Master\"}{\" \"}\n              🏆\n            </Typography>\n            <Typography></Typography>\n          </CardContent>\n          <CardActions>\n            <Stack\n              direction=\"row\"\n              width=\"100%\"\n              sx={{ justifyContent: \"space-between\", alignItems: \"Center\" }}\n            >\n              <Stack direction=\"row\" spacing={3}>\n                📍 Progress: {index}/{questions.length} | ⭐ Score: {score}\n              </Stack>\n\n              <Button type=\"button\" variant=\"contained\" onClick={resetGame}>\n                Restart Game\n              </Button>\n            </Stack>\n          </CardActions>\n        </Card>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <Container sx={{ mt: 8 }}>\n        <Card\n          className=\"card_primary\"\n          sx={{ maxWidth: \"640px\", margin: \"auto\" }}\n        >\n          <CardHeader title={\"Guess MY Name\"} />\n          <CardContent>\n            <div className=\"mb-4 w-32\">\n              <Lottie options={lottieOptions} height={100} width={100} />\n            </div>\n            <motion.div\n              className=\"bg-white p-4 rounded-xl shadow-xl ring ring-green-400 mb-4 text-xl\"\n              initial={{ scale: 0.9 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.5 }}\n            >\n              <Box\n                sx={{\n                  backgroundColor: \"white\",\n                  padding: 4,\n                  borderRadius: \"1rem\",\n                  boxShadow: 3,\n                  border: \"2px solid #66bb6a\", // Green ring border\n                  marginBottom: 4,\n                  fontSize: \"1.25rem\", // Text size: 1.25rem is equivalent to 'text-xl'\n                }}\n              >\n                🧭 Clue {index + 1}: “{current.clue}”\n              </Box>\n            </motion.div>\n            <Box\n              sx={{\n                height: 300,\n                width: 440,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                borderRadius: 4,\n                overflow: \"hidden\",\n                boxShadow: 3,\n                backgroundColor: \"#f0fff0\",\n              }}\n            >\n              <motion.img\n                src={current.img}\n                alt=\"animal\"\n                style={{\n                  maxHeight: \"100%\",\n                  maxWidth: \"100%\",\n                  objectFit: \"contain\",\n                  filter: showFact ? \"none\" : \"blur(4px)\",\n                }}\n                // className={`h-48 mb-4 ${showFact ? \"\" : \"blur-md\"}`}\n                initial={{ scale: 0.9 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.5 }}\n              />\n            </Box>\n\n            <TextField\n              type=\"string\"\n              value={guess}\n              disabled={status}\n              sx={{\n                \"& .MuiInputBase-root\": {\n                  height: 40, // ← change this value to your desired height\n                  mb: 2,\n                  mt: 2,\n                },\n              }}\n              variant=\"outlined\"\n              placeholder=\"Who am I\"\n              fullWidth\n              onChange={(e) => setGuess(e.target.value)}\n            />\n            {wrongAnswerShown && (\n              <motion.div\n                className=\"mt-4 bg-red-100 p-3 rounded shadow-lg text-lg\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n              >\n                ❌ Correct Answer: <strong>{current.answer}</strong>\n              </motion.div>\n            )}\n            {showFact && (\n              <motion.div\n                className=\"mt-4 bg-yellow-100 p-3 rounded shadow-lg text-lg\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n              >\n                🧠 Fun Fact: {current.fact}\n              </motion.div>\n            )}\n          </CardContent>\n\n          <CardActions>\n            <Stack\n              direction=\"row\"\n              width=\"100%\"\n              sx={{ justifyContent: \"space-between\", alignItems: \"Center\" }}\n            >\n              <Stack direction=\"row\" spacing={3}>\n                📍 Progress: {index + 1}/{questions.length} | ⭐ Score: {score}\n              </Stack>\n\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                disabled={status}\n                onClick={checkAnswer}\n              >\n                Submit\n              </Button>\n            </Stack>\n          </CardActions>\n        </Card>\n      </Container>\n    </>\n  );\n}\n"],"names":["questions","clue","answer","img","concat","process","fact","GuessMyNameGame","wrongAnswerShown","setWrongAnswerShown","useState","index","setIndex","useNavigate","guess","setGuess","score","setScore","showFact","setShowFact","playSuccess","useSound","successSfx","playFail","failSfx","playAmbient","ambientSfx","loop","volume","status","setStatus","current","React","resetGame","lottieOptions","autoplay","animationData","explorerAnim","rendererSettings","preserveAspectRatio","length","_jsx","Container","sx","mt","children","_jsxs","Card","className","maxWidth","margin","CardHeader","title","CardContent","Typography","CardActions","Stack","direction","width","justifyContent","alignItems","spacing","Button","type","variant","onClick","_Fragment","Lottie","options","height","motion","div","initial","scale","animate","transition","duration","Box","backgroundColor","padding","borderRadius","boxShadow","border","marginBottom","fontSize","display","overflow","src","alt","style","maxHeight","objectFit","filter","TextField","value","disabled","mb","placeholder","fullWidth","onChange","e","target","opacity","checkAnswer","trim","toLowerCase","confetti","setTimeout"],"sourceRoot":""}